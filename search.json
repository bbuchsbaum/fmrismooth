[{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/AGENTS.html","id":"project-structure--module-organization","dir":"","previous_headings":"","what":"Project Structure & Module Organization","title":"Repository Guidelines","text":"R source: R/ (exported APIs like fmrismooth_default(), utilities, pipelines). C++/Rcpp code: src/ (filters denoisers; compiled via Rcpp). edit generated RcppExports.cpp manually. Tests: tests/testthat/ test-*.R files; harness tests/testthat.R. Package metadata: DESCRIPTION, NAMESPACE (generated roxygen2; hand‑edit).","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/AGENTS.html","id":"build-test-and-development-commands","dir":"","previous_headings":"","what":"Build, Test, and Development Commands","title":"Repository Guidelines","text":"Install dev deps: R -q -e \"install.packages(c('devtools','testthat','RcppArmadillo'))\". Run tests: R -q -e \"devtools::test()\" (uses testthat v3). Build tarball: R CMD build . → e.g., fmrismooth_0.1.0.tar.gz. Check package: R CMD check fmrismooth_0.1.0.tar.gz (runs R CMD check + tests). Iterate locally: R -q -e \"devtools::load_all(); fmrismooth::fmrismooth_default(array(rnorm(10*10*10*5), c(10,10,10,5)))\". Regenerate interfaces: R -q -e \"Rcpp::compileAttributes(); devtools::document()\".","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/AGENTS.html","id":"coding-style--naming-conventions","dir":"","previous_headings":"","what":"Coding Style & Naming Conventions","title":"Repository Guidelines","text":"R: 2‑space indents, tabs; snake_case functions (st_guided_filter3d, recommend_params). C++: prefer snake_case functions/vars match R API; C++11 (CXX_STD = CXX11). Documentation: roxygen2 comments R functions; never edit NAMESPACE directly.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/AGENTS.html","id":"testing-guidelines","dir":"","previous_headings":"","what":"Testing Guidelines","title":"Repository Guidelines","text":"Framework: testthat (Edition 3). Place tests tests/testthat/ test-<topic>.R. Write focused, deterministic tests; prefer synthetic arrays speed. Run locally devtools::test(); full validation R CMD check.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/AGENTS.html","id":"commit--pull-request-guidelines","dir":"","previous_headings":"","what":"Commit & Pull Request Guidelines","title":"Repository Guidelines","text":"Commits: imperative mood, concise scope prefix (e.g., filters: fix sigma scaling). PRs: include summary, motivation, validation (tests example code/outputs). Link issues applicable. Required: tests new features/bugfixes, changes generated files without running regenerate commands .","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/AGENTS.html","id":"security--configuration-tips","dir":"","previous_headings":"","what":"Security & Configuration Tips","title":"Repository Guidelines","text":"Compiled code links BLAS/LAPACK; ensure toolchain installed (e.g., Xcode CLT macOS, build‑essentials Linux). Large arrays can memory‑intensive; prefer small dims tests examples.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":"project-overview","dir":"","previous_headings":"","what":"Project Overview","title":"CLAUDE.md","text":"fmrismooth R package providing fast edge-preserving 3D/4D smoothing denoising fMRI data. implements advanced filtering techniques including: - MP-PCA (Marchenko-Pastur PCA) denoising - Total Variation (TV) denoising robust loss functions (Huber, Tukey) - Bilateral joint bilateral filters using permutohedral lattice approximation - Spatio-temporal guided filters - Variance Stabilizing Transforms (VST)","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":"building-the-package","dir":"","previous_headings":"Build and Development Commands","what":"Building the package","title":"CLAUDE.md","text":"","code":"# Install package dependencies and build R CMD build . R CMD INSTALL fmrismooth_*.tar.gz  # Or from R: devtools::load_all()  # Load for development devtools::install()   # Install locally"},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":"documentation","dir":"","previous_headings":"Build and Development Commands","what":"Documentation","title":"CLAUDE.md","text":"","code":"# Generate documentation from roxygen2 comments devtools::document()"},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":"testing","dir":"","previous_headings":"Build and Development Commands","what":"Testing","title":"CLAUDE.md","text":"test framework currently detected. add tests:","code":"# Set up testthat usethis::use_testthat() # Then run tests with: devtools::test()"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":"core-components","dir":"","previous_headings":"Architecture","what":"Core Components","title":"CLAUDE.md","text":"bilateral_lattice.cpp: Permutohedral lattice fast bilateral filtering mp_pca4d.cpp: Marchenko-Pastur PCA denoising robust_tv_huber_4d.cpp: Robust TV smoothing Huber/Tukey loss st_guided_filter.cpp: Spatio-temporal guided filtering tv_denoise_4d.cpp: Total variation denoising default_pipeline.R: One-liner interface automatic parameter selection pipeline.R: Alternative pipeline implementation mp_pca4d.R: MP-PCA denoising wrapper joint_bilateral.R: Joint bilateral filtering multiple guides bilateral_lattice.R: Lattice-based bilateral filtering st_robust_smooth4d.R: Robust spatio-temporal smoothing auto_params.R: Automatic parameter recommendation based data characteristics utils_io.R, utils_compat.R: neuroim2 integration neuroimaging data resample_align.R, utils_resample.R: Spatial alignment resampling","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":"key-design-patterns","dir":"","previous_headings":"Architecture","what":"Key Design Patterns","title":"CLAUDE.md","text":"neuroim2 Integration: Optional dependency neuroimaging data structures (NeuroVol, NeuroVec) Flexible Input: Functions accept plain arrays neuroim2 objects Automatic Resampling: Guides masks automatically aligned fMRI grid neuroim2 available Parameter Auto-tuning: recommend_params() suggests optimal parameters based voxel size target smoothness","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":"typical-workflow","dir":"","previous_headings":"Architecture","what":"Typical Workflow","title":"CLAUDE.md","text":"Load fMRI data 4D array neuroim2::NeuroVec Optionally provide anatomical T1 guide tissue probability maps Call fmrismooth_default() automatic parameter selection build custom pipeline combining MP-PCA → robust smoothing → bilateral filtering","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/CLAUDE.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"CLAUDE.md","text":"Required: Rcpp, RcppArmadillo (C++ linear algebra) Optional: neuroim2 (neuroimaging data handling spatial resampling) System: BLAS/LAPACK libraries (handled R installation)","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/bilateral-lattice.html","id":"what-is-a-permutohedral-lattice-and-why-use-it","dir":"Articles","previous_headings":"","what":"What is a permutohedral lattice, and why use it?","title":"Joint Bilateral Smoothing with a Permutohedral Lattice","text":"bilateral (joint bilateral) filter performs Gaussian blur space also additional “range” dimension built intensity features. exact Gaussian blur high‑dimensional feature space regular grid expensive. permutohedral lattice sparse, skewed grid tessellates feature space simplices. enables efficient three‑step procedure — often called splat → blur → slice: splat: project voxel’s feature vector nearest lattice simplex accumulate value simplex vertices; blur: run small fixed‑degree Gaussian-like convolution along lattice axes (fast lattice sparse low‑degree); slice: interpolate blurred lattice values back original feature locations. gives good approximation high‑dimensional Gaussian blur cost linear number voxels roughly linear feature dimensionality. practice makes joint bilateral filtering multiple guides optional temporal/design features fast enough routine use fMRI volumes.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/bilateral-lattice.html","id":"intuition-and-features","dir":"Articles","previous_headings":"","what":"Intuition and features","title":"Joint Bilateral Smoothing with a Permutohedral Lattice","text":"voxel represented feature vector always contains spatial coordinates can include additional components. 3D filtering, spatial part (x/sigma_sp, y/sigma_sp, z/sigma_sp). provide guide volume, intensity contributes g/sigma_r. Additional guides simply append intensity features, scaled sigma_r element. 4D inputs, can also add temporal component t/sigma_t, optionally design regressor d_t/sigma_d time‑varying effects want preserve. Filtering isotropic Gaussian blur feature space, projected back image grid.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/bilateral-lattice.html","id":"parameters-and-their-roles","dir":"Articles","previous_headings":"","what":"Parameters and their roles","title":"Joint Bilateral Smoothing with a Permutohedral Lattice","text":"sigma_sp sets far spatially average; larger values increase smoothing. sigma_r controls strongly filter respects intensity edges: small values stop averaging across edges; larger values permit mixing. 4D, sigma_t couples frames time; setting zero decouples frames. design vector sigma_d create additional feature encourages consistency across frames similar design values. Internally, blur_iters performs repeated lattice blurs approximate wider Gaussian. use cases need 1–2 iterations.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/bilateral-lattice.html","id":"d-example","dir":"Articles","previous_headings":"","what":"3D example","title":"Joint Bilateral Smoothing with a Permutohedral Lattice","text":"smaller sigma_r preserves edges aggressively cost less denoising across intensity transitions.","code":"d3 <- c(12, 12, 12) vol <- array(100, dim = d3) vol[6:12, , ] <- vol[6:12, , ] + 20                    # a step edge noisy3d <- vol + array(rnorm(prod(d3), sd = 6), dim = d3)  out3d_soft  <- bilat_lattice3d(noisy3d, sigma_sp = 2.0, sigma_r = 12) out3d_edgey <- bilat_lattice3d(noisy3d, sigma_sp = 2.0, sigma_r = 4)  c(var_noisy   = var(as.vector(noisy3d)),   var_soft    = var(as.vector(out3d_soft)),   var_edgey   = var(as.vector(out3d_edgey))) #> var_noisy  var_soft var_edgey  #> 137.92025  56.06691  56.06691  # visualize a central slice zmid <- ceiling(d3[3]/2) viz3 <- rbind(   slice_df3d(noisy3d, zmid, \"noisy\"),   slice_df3d(out3d_soft, zmid, \"sigma_r=12\"),   slice_df3d(out3d_edgey, zmid, \"sigma_r=4\") ) ggplot(viz3, aes(x, y, fill = val)) +   geom_raster() +   coord_equal() +   scale_x_continuous(expand = c(0,0), breaks = NULL) +   scale_y_reverse(expand = c(0,0), breaks = NULL) +   scale_fill_gradient(low = \"black\", high = \"white\") +   facet_wrap(~method, nrow = 1) +   guides(fill = \"none\") +   theme_minimal(base_size = 10) +   theme(axis.title = element_blank(), axis.text = element_blank(), panel.grid = element_blank()) +   labs(title = \"3D: effect of sigma_r on a mid-slice\")"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/bilateral-lattice.html","id":"d-example-with-temporal-coupling","dir":"Articles","previous_headings":"","what":"4D example with temporal coupling","title":"Joint Bilateral Smoothing with a Permutohedral Lattice","text":"Increasing sigma_t introduces gentle temporal smoothing can improve SNR signal temporally coherent.","code":"d4 <- c(10, 10, 10, 16) base <- array(100, dim = d4) base[6:10, , , ] <- base[6:10, , , ] + 20 noisy4d <- base + array(rnorm(prod(d4), sd = 5), dim = d4)  out_spat_only <- bilat_lattice4d(noisy4d, sigma_sp = 2.0, sigma_t = 0.0, sigma_r = 10) out_spat_temp <- bilat_lattice4d(noisy4d, sigma_sp = 2.0, sigma_t = 0.6, sigma_r = 10)  c(var_spat_only = var(as.vector(out_spat_only)),   var_spat_temp = var(as.vector(out_spat_temp))) #> var_spat_only var_spat_temp  #>      60.64485      60.76268  # visualize a central slice of a central frame zmid <- ceiling(d4[3]/2); tmid <- ceiling(d4[4]/2) viz4 <- rbind(   slice_df4d(noisy4d, zmid, tmid, \"noisy\"),   slice_df4d(out_spat_only, zmid, tmid, \"sigma_t=0.0\"),   slice_df4d(out_spat_temp, zmid, tmid, \"sigma_t=0.6\") ) ggplot(viz4, aes(x, y, fill = val)) +   geom_raster() +   coord_equal() +   scale_x_continuous(expand = c(0,0), breaks = NULL) +   scale_y_reverse(expand = c(0,0), breaks = NULL) +   scale_fill_gradient(low = \"black\", high = \"white\") +   facet_wrap(~method, nrow = 1) +   guides(fill = \"none\") +   theme_minimal(base_size = 10) +   theme(axis.title = element_blank(), axis.text = element_blank(), panel.grid = element_blank()) +   labs(title = \"4D: temporal coupling on a mid-slice/frame\")"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/bilateral-lattice.html","id":"designaware-features","dir":"Articles","previous_headings":"","what":"Design‑aware features","title":"Joint Bilateral Smoothing with a Permutohedral Lattice","text":"regressor (example, expected response time), passing design adds feature keeps frames similar design values closer lattice. helps denoising without blurring across task‑related changes.","code":"design <- sin(seq(0, 2*pi, length.out = d4[4])) out_design <- bilat_lattice4d(noisy4d, sigma_sp = 2.0, sigma_t = 0.4, sigma_r = 10,                               design = design, sigma_d = 1.0) all.equal(dim(out_design), d4) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/bilateral-lattice.html","id":"practical-tips","dir":"Articles","previous_headings":"","what":"Practical tips","title":"Joint Bilateral Smoothing with a Permutohedral Lattice","text":"Start sigma_sp around 2–3 voxels sigma_r comparable noise scale. Add small sigma_t (0.3–0.8) 4D data. Use higher sigma_r want stronger denoising edge rounding, lower one preserving boundaries critical.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/guided-filter.html","id":"spatial-guided-filtering-3d","dir":"Articles","previous_headings":"","what":"Spatial guided filtering (3D)","title":"Edge-Preserving Guided Filtering (3D/4D)","text":"3D variant processes one volume using sliding window. window radius controls spatial scale; regularization eps sets “rigid” fit guide: small values track edges closely, larger values behave like averaging filter.  Using input guide common. can also pass external guide, example T1 anatomical, steer filter across low‑contrast fMRI regions.","code":"d3 <- c(10, 10, 10) vol <- array(100, dim = d3) vol[6:10, , ] <- vol[6:10, , ] + 20 noisy <- vol + array(rnorm(prod(d3), sd = 6), dim = d3)  gf_smooth <- guided_filter3d(noisy, radius = 2L, eps = 0.5^2) gf_rigid  <- guided_filter3d(noisy, radius = 2L, eps = 1.5^2)  c(var_noisy = var(as.vector(noisy)),   var_smooth = var(as.vector(gf_smooth)),   var_rigid  = var(as.vector(gf_rigid))) #>  var_noisy var_smooth  var_rigid  #>   137.3983   136.9045   133.1892  zmid <- ceiling(d3[3]/2) viz3 <- rbind(   slice_df3d(noisy, zmid, \"noisy\"),   slice_df3d(gf_smooth, zmid, \"eps=0.25\"),   slice_df3d(gf_rigid, zmid, \"eps=2.25\") ) ggplot(viz3, aes(x, y, fill = val)) + geom_raster() + coord_fixed() + scale_y_reverse() +   scale_fill_gradient(low = \"black\", high = \"white\") + facet_wrap(~method) + theme_minimal(base_size = 10) +   labs(title = \"3D guided filter: mid-slice\", x = NULL, y = NULL, fill = \"intensity\")"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/guided-filter.html","id":"spatiotemporal-guided-filtering-4d","dir":"Articles","previous_headings":"","what":"Spatiotemporal guided filtering (4D)","title":"Edge-Preserving Guided Filtering (3D/4D)","text":"4D variant applies spatial guided filter frame, optional temporal guided step per voxel. temporal radius sets many frames either side include; eps_t plays role space. Motion‑aware temporal weights can ‑weight transitions frames large motion changes.  per‑frame motion parameters, supply motion_params; filter dampen temporal averaging across high‑motion transitions.","code":"d4 <- c(8, 8, 8, 14) x <- array(100, dim = d4) + array(rnorm(prod(d4), sd = 5), dim = d4)  out_no_temp <- guided_filter4d(x, radius_sp = 2L, eps_sp = 0.6^2, radius_t = 0L) out_temp    <- guided_filter4d(x, radius_sp = 2L, eps_sp = 0.6^2, radius_t = 1L, eps_t = 0.3^2)  c(var_no_temp = var(as.vector(out_no_temp)),   var_temp    = var(as.vector(out_temp))) #> var_no_temp    var_temp  #>    25.00629    24.83296  zmid <- ceiling(d4[3]/2); tmid <- ceiling(d4[4]/2) viz4 <- rbind(   slice_df4d(x, zmid, tmid, \"noisy\"),   slice_df4d(out_no_temp, zmid, tmid, \"radius_t=0\"),   slice_df4d(out_temp, zmid, tmid, \"radius_t=1\") ) ggplot(viz4, aes(x, y, fill = val)) + geom_raster() + coord_fixed() + scale_y_reverse() +   scale_fill_gradient(low = \"black\", high = \"white\") + facet_wrap(~method) + theme_minimal(base_size = 10) +   labs(title = \"4D guided filter: mid-slice/frame\", x = NULL, y = NULL, fill = \"intensity\")"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/guided-filter.html","id":"choosing-parameters","dir":"Articles","previous_headings":"","what":"Choosing parameters","title":"Edge-Preserving Guided Filtering (3D/4D)","text":"Start radius = 2–3 voxels eps near noise variance. 4D, temporal radius 1 modest eps_t often helps without washing transients. edges look washed , reduce eps; banding ‑fitting appears, increase .","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/intro.html","id":"quick-start-oneliner-pipeline","dir":"Articles","previous_headings":"","what":"Quick start: one‑liner pipeline","title":"Getting Started with fmrismooth","text":"convenient entry point fmrismooth_default(), infers reasonable parameters data optionally runs robust stage joint bilateral final stage.  default pipeline estimates spatial/temporal bandwidths noise scale data, applies design‑aware joint bilateral smoothing across space time. T1 probability maps, pass guides; otherwise spatial mean current estimate serves weak guide.","code":"library(fmrismooth) library(ggplot2)  # helper to build a data.frame for a spatial slice (4D) slice_df4d <- function(arr, z, t, label) {   stopifnot(length(dim(arr)) == 4L)   nx <- dim(arr)[1]; ny <- dim(arr)[2]   df <- expand.grid(x = seq_len(nx), y = seq_len(ny))   df$val <- as.vector(arr[,,z,t])   df$method <- label   df }  dims <- c(8, 8, 8, 12) clean <- array(100, dim = dims) noisy <- clean + array(rnorm(prod(dims), sd = 4), dim = dims)  # One-liner with auto-parameters and joint bilateral final stage smoothed <- smooth_auto(noisy, robust = \"none\", auto_params = TRUE)  c(var_original = var(as.vector(noisy)),   var_smoothed  = var(as.vector(smoothed))) #> var_original var_smoothed  #>     16.64967     13.54920  # visualize mid-slice of a mid-frame zmid <- ceiling(dims[3]/2); tmid <- ceiling(dims[4]/2) viz <- rbind(   slice_df4d(noisy, zmid, tmid, \"noisy\"),   slice_df4d(smoothed, zmid, tmid, \"smoothed\") ) ggplot(viz, aes(x, y, fill = val)) +   geom_raster() +   scale_fill_gradient(low = \"black\", high = \"white\") +   coord_fixed() +   scale_y_reverse() +   facet_wrap(~method) +   theme_minimal(base_size = 10) +   labs(title = \"Mid-slice, mid-frame\", x = NULL, y = NULL, fill = \"intensity\")"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/intro.html","id":"mppca-joint-bilateral","dir":"Articles","previous_headings":"","what":"MP‑PCA + joint bilateral","title":"Getting Started with fmrismooth","text":"stronger denoising preserving structure, combine MP‑PCA joint bilateral filtering using fmrismooth_mppca_pipeline(). pipeline first denoises overlapping space×time patches PCA, smooths weakly temporal‑aware lattice bilateral filter. patches contribute (e.g., outside mask), original signal preserved.","code":"mp_out <- smooth_mppca(   noisy,   sigma_mode = \"global\",   # estimate one sigma from temporal differences   sigma_sp   = 2.5,   sigma_t    = 0.5,   sigma_r    = 12,   lattice_blur_iters = 1L )  c(var_original = var(as.vector(noisy)),   var_mppca    = var(as.vector(mp_out))) #> var_original    var_mppca  #> 16.649674935  0.007190354"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/intro.html","id":"joint-bilateral-filtering-directly","dir":"Articles","previous_headings":"","what":"Joint bilateral filtering directly","title":"Getting Started with fmrismooth","text":"want direct control bandwidths guides, call fast_bilateral_lattice4d() 3D counterpart. hood, features embedded permutohedral lattice; values splatted lattice vertices, blurred along simplex axes, sliced back image grid. range bandwidth sigma_r can vector using multiple guides.","code":"# 4D joint bilateral with explicit parameters jb <- bilat_lattice4d(   noisy,   sigma_sp = 2.0,   sigma_t  = 0.6,   sigma_r  = 10.0,   guide_spatial = NULL,   # optional 3D guide; omit for self-guided   guides = NULL,          # optional list of 3D guides (e.g., tissue probs)   design = NULL,          # optional length-T regressor for design-aware feature   mask = NULL             # optional 3D mask )  all.equal(dim(jb), dims) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/intro.html","id":"robust-and-tvbased-smoothing","dir":"Articles","previous_headings":"","what":"Robust and TV‑based smoothing","title":"Getting Started with fmrismooth","text":"goal artifact suppression minimal blurring, total variation methods robust losses often good fit. package exposes straightforward TV denoiser robust variant. spatial temporal TV weights (lambda_s, lambda_t) trade fidelity smoothness; robust version internally sets thresholds estimated noise scale provided.","code":"# Space-time TV denoising (Chambolle-Pock) tv <- tv_denoise4d(noisy, lambda_s = 0.6, lambda_t = 0.2, iters = 20L)  # Robust variant using Huber or Tukey data terms rob <- tv_robust4d(noisy, loss = \"huber\", iters = 20L)  c(var_tv = var(as.vector(tv)), var_rob = var(as.vector(rob))) #>    var_tv   var_rob  #>  5.274001 17.304458"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/intro.html","id":"variancestabilizing-transform-wrapper","dir":"Articles","previous_headings":"","what":"Variance‑stabilizing transform wrapper","title":"Getting Started with fmrismooth","text":"Magnitude MR data Rician‑distributed. simple yet effective tactic apply variance‑stabilizing transform (VST), denoise approximate Gaussian model, invert transform. vst_wrap() helper encapsulates pattern. sigma supplied input 4D, wrapper estimates temporal differences masked voxels.","code":"vst_out <- vst_denoise(   noisy,   denoise_fun = function(z) bilat_lattice4d(z, sigma_sp = 2.0, sigma_t = 0.4, sigma_r = 8) )  c(var_vst = var(as.vector(vst_out))) #>  var_vst  #> 0.186229"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/intro.html","id":"choosing-parameters","dir":"Articles","previous_headings":"","what":"Choosing parameters","title":"Getting Started with fmrismooth","text":"Sensible defaults helpful, might want parameters tied voxel size TR. recommend_params() helper looks spacing (available), TR, global noise estimate, returning compact list can pass pipelines. practice, start default pipeline, check variance reduction appearance edges slices, refine joint bilateral TV methods need control. functions accept plain arrays; work neuroim2, spatial alignment happens automatically fMRI object guides carry space metadata.","code":"rec <- suggest_params(noisy, tr = 2.0, target_fwhm_mm = 5) str(rec) #> List of 5 #>  $ lambda_s: num 1.2 #>  $ lambda_t: num 0.159 #>  $ sigma_sp: num 1 #>  $ sigma_t : num 0.5 #>  $ sigma_r : num 5  out <- smooth_auto(noisy, robust = \"none\", auto_params = FALSE)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/mppca.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How it works","title":"MP–PCA Denoising for fMRI","text":"overlapping 3D patch temporal window, method recenters data, computes thin SVD, retains components whose singular values exceed noise threshold derived Marchenko–Pastur distribution. Reconstructions overlapping patches averaged back grid.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/mppca.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"MP–PCA Denoising for fMRI","text":"patch spatial patch size; larger patches capture structure can oversmooth local details. tw temporal window; least frames. stride sets densely patches tiled. sigma_mode controls noise estimate: \"patch\" estimates per‑patch, \"global\" uses one estimate, \"fixed\" uses value provide via sigma_value.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/mppca.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"MP–PCA Denoising for fMRI","text":"Use denser strides higher quality increased cost. Per‑patch noise estimates adapt local variation may less stable small windows.","code":"d4 <- c(10, 10, 10, 24) clean <- array(100, dim = d4) noisy <- clean + array(rnorm(prod(d4), sd = 5), dim = d4)  mp1 <- mppca_denoise4d(noisy, sigma_mode = \"global\",                        patch = c(5L,5L,5L), tw = 24L, stride = c(3L,3L,3L,12L))  mp2 <- mppca_denoise4d(noisy, sigma_mode = \"patch\",                        patch = c(5L,5L,5L), tw = 16L, stride = c(3L,3L,3L,8L))  c(var_noisy = var(as.vector(noisy)),   var_mp1   = var(as.vector(mp1)),   var_mp2   = var(as.vector(mp2))) #> var_noisy   var_mp1   var_mp2  #> 25.041395  6.514401  6.036098"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/robust-tv.html","id":"parameters-in-practice","dir":"Articles","previous_headings":"","what":"Parameters in practice","title":"Robust TV: Huber and Tukey Data Terms","text":"lambda_s lambda_t TV weights standard TV. Select loss = \"huber\" loss = \"tukey\". Huber threshold delta Tukey cutoff cthresh determine transition inlier outlier behavior; leaving NULL estimates data. alpha parameter tunes Tukey shape. Temporal weights can reduce smoothing across high‑motion transitions: provide per‑frame motion parameters via motion_params, pass explicit temporal_weights.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/robust-tv.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Robust TV: Huber and Tukey Data Terms","text":"robust losses reduce influence isolated spikes relative standard TV. artifacts correlate motion, supplying motion_params improves temporal selectivity.","code":"d4 <- c(8, 8, 8, 10) base <- array(100, dim = d4) + array(rnorm(prod(d4), sd = 5), dim = d4) base[4,4,4,5] <- 220  # inject an outlier  rob_huber <- tv_robust4d(base, loss = \"huber\", iters = 20L) rob_tukey <- tv_robust4d(base, loss = \"tukey\", iters = 20L)  c(var_huber = var(as.vector(rob_huber)),   var_tukey = var(as.vector(rob_tukey))) #> var_huber var_tukey  #>  28.89872  28.90254  # visualize the frame containing the outlier, mid-slice zmid <- ceiling(d4[3]/2); t_spike <- 5 viz <- rbind(   slice_df4d(base, zmid, t_spike, \"noisy+outlier\"),   slice_df4d(rob_huber, zmid, t_spike, \"Huber\"),   slice_df4d(rob_tukey, zmid, t_spike, \"Tukey\") ) ggplot(viz, aes(x, y, fill = val)) + geom_raster() + coord_fixed() + scale_y_reverse() +   scale_fill_gradient(low = \"black\", high = \"white\") + facet_wrap(~method) + theme_minimal(base_size = 10) +   labs(title = \"Robust TV on an outlier frame (mid-slice)\", x = NULL, y = NULL, fill = \"intensity\")"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/tv-denoising.html","id":"parameters-and-their-effects","dir":"Articles","previous_headings":"","what":"Parameters and their effects","title":"Space–Time Total Variation Denoising","text":"lambda_s controls spatial smoothing; higher values produce flatter regions edges. lambda_t controls temporal smoothing; increasing enforces consistency across frames. algorithm step sizes tau, sigma, relaxation theta set robust defaults can tuned.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/tv-denoising.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Space–Time Total Variation Denoising","text":"TV excels want aggressive noise reduction crisp boundaries. small features oversmoothed, reduce lambda_s /lambda_t, try bilateral guided filter.","code":"d4 <- c(10, 10, 10, 12) base <- array(100, dim = d4) base[6:10, , , ] <- base[6:10, , , ] + 15 noisy <- base + array(rnorm(prod(d4), sd = 5), dim = d4)  tv_moderate <- tv_denoise4d(noisy, lambda_s = 0.6, lambda_t = 0.2, iters = 20L) tv_strong   <- tv_denoise4d(noisy, lambda_s = 0.9, lambda_t = 0.35, iters = 20L)  c(var_noisy   = var(as.vector(noisy)),   var_mod     = var(as.vector(tv_moderate)),   var_strong  = var(as.vector(tv_strong))) #>  var_noisy    var_mod var_strong  #>   81.30328   64.57129   59.07842  zmid <- ceiling(d4[3]/2); tmid <- ceiling(d4[4]/2) viz <- rbind(   slice_df4d(noisy, zmid, tmid, \"noisy\"),   slice_df4d(tv_moderate, zmid, tmid, \"TV moderate\"),   slice_df4d(tv_strong, zmid, tmid, \"TV strong\") ) ggplot(viz, aes(x, y, fill = val)) + geom_raster() + coord_fixed() + scale_y_reverse() +   scale_fill_gradient(low = \"black\", high = \"white\") + facet_wrap(~method) + theme_minimal(base_size = 10) +   labs(title = \"TV denoising: mid-slice/frame\", x = NULL, y = NULL, fill = \"intensity\")"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/vst.html","id":"forward-and-inverse-transforms","dir":"Articles","previous_headings":"","what":"Forward and inverse transforms","title":"Variance–Stabilizing Transform (VST) for Rician Magnitude","text":"forward transform maps magnitude x z = sqrt(max(x^2 - 2*sigma^2, 0)). inverse maps back via x = sqrt(max(z^2 + 2*sigma^2, 0)). parameter sigma noise standard deviation magnitude units.","code":"x <- array(rexp(100, rate = 1/100), dim = c(5,5,4)) z <- vst_forward(x, sigma = 2) all.equal(dim(z), dim(x)) #> [1] TRUE xi <- vst_inverse(z, sigma = 2) all.equal(dim(xi), dim(x)) #> [1] TRUE"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/vst.html","id":"wrapping-a-denoiser-how-to-use-with-this-package","dir":"Articles","previous_headings":"","what":"Wrapping a denoiser (how to use with this package)","title":"Variance–Stabilizing Transform (VST) for Rician Magnitude","text":"vst_denoise(x, sigma, denoise_fun, ...) applies forward transform, calls denoiser, inverts. denoise_fun can function package accepts data first argument returns array shape. Extra arguments forwarded via .... convenient usage pass function directly supply parameters ....  can also pass anonymous function prefer pre‑bind certain arguments:","code":"d4 <- c(8, 8, 8, 12) clean <- array(100, dim = d4) noisy <- sqrt((clean + array(rnorm(prod(d4), sd = 2), dim = d4))^2)  # Rician-like  # Use joint bilateral in the Gaussianized (VST) domain out_bilat <- vst_denoise(   noisy,   denoise_fun = bilat_lattice4d,   sigma_sp = 2.0, sigma_t = 0.4, sigma_r = 8 )  # Or use space–time TV in the VST domain out_tv <- vst_denoise(   noisy,   denoise_fun = tv_denoise4d,   lambda_s = 0.6, lambda_t = 0.2, iters = 20L )  c(var_noisy = var(as.vector(noisy)),   var_bilat = var(as.vector(out_bilat)),   var_tv    = var(as.vector(out_tv))) #>  var_noisy  var_bilat     var_tv  #> 3.97367690 0.03625491 0.20270265  zmid <- ceiling(d4[3]/2); tmid <- ceiling(d4[4]/2) viz <- rbind(   slice_df4d(noisy, zmid, tmid, \"noisy (magnitude)\"),   slice_df4d(out_bilat, zmid, tmid, \"VST + bilat_lattice4d\"),   slice_df4d(out_tv, zmid, tmid, \"VST + tv_denoise4d\") ) ggplot(viz, aes(x, y, fill = val)) + geom_raster() + coord_fixed() + scale_y_reverse() +   scale_fill_gradient(low = \"black\", high = \"white\") + facet_wrap(~method) + theme_minimal(base_size = 10) +   labs(title = \"VST-based denoising: mid-slice/frame\", x = NULL, y = NULL, fill = \"intensity\") out_custom <- vst_denoise(   noisy,   denoise_fun = function(z) bilat_lattice4d(z, sigma_sp = 2.5, sigma_t = 0.5, sigma_r = 10) ) dim(out_custom) #> [1]  8  8  8 12"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/vst.html","id":"using-with-pipelines","dir":"Articles","previous_headings":"Wrapping a denoiser (how to use with this package)","what":"Using with pipelines","title":"Variance–Stabilizing Transform (VST) for Rician Magnitude","text":"can wrap end‑‑end pipelines, avoid configurations internally estimate Rician noise sigma (VST‑transformed) data. example, prefer explicit parameters auto‑parameter estimation wrapping pipelines:","code":"# OK: wrap a pipeline you configure explicitly out_ok <- vst_denoise(   noisy,   denoise_fun = bilat_lattice4d,  # core smoother used in smooth_auto()   sigma_sp = 2.5, sigma_t = 0.5, sigma_r = 12 )  # Avoid: wrapping smooth_auto() with auto_params=TRUE will try to # estimate a Rician sigma on VST data. If you do wrap it, set auto_params=FALSE # and pass explicit parameters."},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/vst.html","id":"d-usage","dir":"Articles","previous_headings":"Wrapping a denoiser (how to use with this package)","what":"3D usage","title":"Variance–Stabilizing Transform (VST) for Rician Magnitude","text":"3D volumes temporal dimension estimate sigma ; must supply :","code":"d3 <- c(10, 10, 10) vol <- array(100, dim = d3) + array(rnorm(prod(d3), sd = 2), dim = d3) out3d <- vst_denoise(vol, sigma = 2.0, denoise_fun = bilat_lattice3d, sigma_sp = 2.0, sigma_r = 8) all.equal(dim(out3d), d3) #> [1] TRUE  # visualize 3D mid-slice zmid <- ceiling(d3[3]/2) viz3 <- rbind(   transform(expand.grid(x = seq_len(d3[1]), y = seq_len(d3[2])), val = as.vector(vol[,,zmid]), method = \"noisy\"),   transform(expand.grid(x = seq_len(d3[1]), y = seq_len(d3[2])), val = as.vector(out3d[,,zmid]), method = \"VST + bilat_lattice3d\") ) ggplot(viz3, aes(x, y, fill = val)) + geom_raster() + coord_fixed() + scale_y_reverse() +   scale_fill_gradient(low = \"black\", high = \"white\") + facet_wrap(~method) + theme_minimal(base_size = 10) +   labs(title = \"VST-based denoising (3D)\", x = NULL, y = NULL, fill = \"intensity\")"},{"path":"https://bbuchsbaum.github.io/fmrismooth/articles/vst.html","id":"when-to-use-vst","dir":"Articles","previous_headings":"Wrapping a denoiser (how to use with this package)","what":"When to use VST","title":"Variance–Stabilizing Transform (VST) for Rician Magnitude","text":"VST especially helpful noise level varies signal intensity (magnitude MR). can make downstream parameter choices stable bring noise closer additive Gaussian, bilateral, guided, TV MP–PCA assume. complex‑valued reconstructions already Gaussianized data, may skip VST denoise directly.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Name. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Name Y (2025). fmrismooth: Fast Edge-Preserving 3D/4D Smoothing Denoising fMRI. R package version 0.1.0, https://bbuchsbaum.github.io/fmrismooth/.","code":"@Manual{,   title = {fmrismooth: Fast Edge-Preserving 3D/4D Smoothing and Denoising for fMRI},   author = {Your Name},   year = {2025},   note = {R package version 0.1.0},   url = {https://bbuchsbaum.github.io/fmrismooth/}, }"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_joint3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for fast_bilateral_joint3d — bilat_joint3d","title":"Preferred alias for fast_bilateral_joint3d — bilat_joint3d","text":"Preferred alias fast_bilateral_joint3d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_joint3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for fast_bilateral_joint3d — bilat_joint3d","text":"","code":"bilat_joint3d(   vol,   guide_spatial,   sigma_s,   sigma_r,   range_bins = NULL,   passes = 1L,   mask = NULL,   interp_guide = 1L,   interp_mask = 0L,   backend = c(\"grid\", \"permutohedral\"),   guides = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_joint3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for fast_bilateral_joint3d — bilat_joint3d","text":"vol 3D volume array `NeuroVol`. guide_spatial 3D guide image (array `NeuroVol`). sigma_s Spatial sigma (voxels). sigma_r Range sigma guide intensity. range_bins Unused placeholder grid backend compatibility. passes Integer number lattice blur passes. mask Optional 3D mask. interp_guide Guide interpolation mode resampling. interp_mask Mask interpolation mode resampling. backend One 'grid' 'permutohedral'. guides Optional list additional 3D guides.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_joint4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for fast_bilateral_joint4d — bilat_joint4d","title":"Preferred alias for fast_bilateral_joint4d — bilat_joint4d","text":"Preferred alias fast_bilateral_joint4d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_joint4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for fast_bilateral_joint4d — bilat_joint4d","text":"","code":"bilat_joint4d(   vec,   guide_spatial,   sigma_s,   sigma_t,   sigma_r,   range_bins = NULL,   passes = 1L,   mask = NULL,   interp_guide = 1L,   interp_mask = 0L,   backend = c(\"grid\", \"permutohedral\"),   design = NULL,   sigma_d = 1,   guides = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_joint4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for fast_bilateral_joint4d — bilat_joint4d","text":"vec 4D array `NeuroVec`. guide_spatial 3D spatial guide. sigma_s Spatial sigma (voxels). sigma_t Temporal sigma (frames). sigma_r Range sigma guide intensity. range_bins Unused placeholder grid backend compatibility. passes Integer number lattice blur passes. mask Optional 3D mask. interp_guide Guide interpolation mode resampling. interp_mask Mask interpolation mode resampling. backend One 'grid' 'permutohedral'. design Optional length-T design regressor add lattice feature. sigma_d Sigma design feature. guides Optional list additional 3D guides.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_lattice3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for fast_bilateral_lattice3d — bilat_lattice3d","title":"Preferred alias for fast_bilateral_lattice3d — bilat_lattice3d","text":"Preferred alias fast_bilateral_lattice3d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_lattice3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for fast_bilateral_lattice3d — bilat_lattice3d","text":"","code":"bilat_lattice3d(   vol,   sigma_sp = 2.5,   sigma_r = 1,   guide = NULL,   guides = NULL,   blur_iters = 2L,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_lattice3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for fast_bilateral_lattice3d — bilat_lattice3d","text":"vol 3D volume array `NeuroVol`. sigma_sp Spatial sigma (voxels). sigma_r Range sigma(s) guide intensity dimensions. Scalar vector matching `guide` + `guides` count. guide Optional 3D spatial guide. guides Optional list additional 3D guides (e.g., probabilities). blur_iters Integer number lattice blur iterations. mask Optional 3D logical/0-1 mask.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_lattice4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for fast_bilateral_lattice4d — bilat_lattice4d","title":"Preferred alias for fast_bilateral_lattice4d — bilat_lattice4d","text":"Preferred alias fast_bilateral_lattice4d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_lattice4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for fast_bilateral_lattice4d — bilat_lattice4d","text":"","code":"bilat_lattice4d(   vec,   sigma_sp = 2.5,   sigma_t = 0.5,   sigma_r = 1,   guide_spatial = NULL,   guides = NULL,   design = NULL,   sigma_d = 1,   blur_iters = 1L,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/bilat_lattice4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for fast_bilateral_lattice4d — bilat_lattice4d","text":"vec 4D fMRI array `NeuroVec`. sigma_sp Spatial sigma (voxels). sigma_t Temporal sigma (frames). sigma_r Range sigma(s) guide intensity dimensions. Scalar vector matching `guide_spatial` + length(`guides`). guide_spatial Optional 3D spatial guide. guides Optional list 3D guides (probability maps, etc.). design Optional numeric vector length T (frames) design-aware features. sigma_d Sigma design regressor feature. blur_iters Integer number lattice blur iterations. mask Optional 3D logical/0-1 mask.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/estimate_rician_sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for estimate_sigma_rician — estimate_rician_sigma","title":"Preferred alias for estimate_sigma_rician — estimate_rician_sigma","text":"Preferred alias estimate_sigma_rician","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/estimate_rician_sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for estimate_sigma_rician — estimate_rician_sigma","text":"","code":"estimate_rician_sigma(vec, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/estimate_rician_sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for estimate_sigma_rician — estimate_rician_sigma","text":"vec 4D fMRI data numeric array `neuroim2::NeuroVec`. mask Optional 3D logical/0-1 mask (array `NeuroVol`). `NULL`, voxels used.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/estimate_sigma_rician.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust noise sigma estimate for Rician magnitude fMRI (4D only) — estimate_sigma_rician","title":"Robust noise sigma estimate for Rician magnitude fMRI (4D only) — estimate_sigma_rician","text":"Estimates global noise standard deviation temporal differences, assuming Rician magnitude noise approximately Gaussian moderate SNR.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/estimate_sigma_rician.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust noise sigma estimate for Rician magnitude fMRI (4D only) — estimate_sigma_rician","text":"","code":"estimate_sigma_rician(vec, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/estimate_sigma_rician.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust noise sigma estimate for Rician magnitude fMRI (4D only) — estimate_sigma_rician","text":"vec 4D fMRI data numeric array `neuroim2::NeuroVec`. mask Optional 3D logical/0-1 mask (array `NeuroVol`). `NULL`, voxels used.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/estimate_sigma_rician.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust noise sigma estimate for Rician magnitude fMRI (4D only) — estimate_sigma_rician","text":"single numeric value: estimated noise sigma.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/estimate_sigma_rician.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Robust noise sigma estimate for Rician magnitude fMRI (4D only) — estimate_sigma_rician","text":"","code":"set.seed(1) x <- array(100 + rnorm(10*10*10*5, sd=2), c(10,10,10,5)) estimate_sigma_rician(x) #> [1] 1.508273"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_joint3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint3d","title":"3D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint3d","text":"Joint bilateral filter using permutohedral lattice backend (`grid` alias supported routed implementation).","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_joint3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint3d","text":"","code":"fast_bilateral_joint3d(   vol,   guide_spatial,   sigma_s,   sigma_r,   range_bins = NULL,   passes = 1L,   mask = NULL,   interp_guide = 1L,   interp_mask = 0L,   backend = c(\"grid\", \"permutohedral\"),   guides = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_joint3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint3d","text":"vol 3D volume array `NeuroVol`. guide_spatial 3D guide image (array `NeuroVol`). sigma_s Spatial sigma (voxels). sigma_r Range sigma guide intensity. range_bins Unused placeholder grid backend compatibility. passes Integer number lattice blur passes. mask Optional 3D mask. interp_guide Guide interpolation mode resampling. interp_mask Mask interpolation mode resampling. backend One 'grid' 'permutohedral'. guides Optional list additional 3D guides.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_joint3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"3D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint3d","text":"Smoothed 3D data, wrapped like `vol` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_joint4d.html","id":null,"dir":"Reference","previous_headings":"","what":"4D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint4d","title":"4D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint4d","text":"Joint bilateral filter across space time using lattice backend.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_joint4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"4D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint4d","text":"","code":"fast_bilateral_joint4d(   vec,   guide_spatial,   sigma_s,   sigma_t,   sigma_r,   range_bins = NULL,   passes = 1L,   mask = NULL,   interp_guide = 1L,   interp_mask = 0L,   backend = c(\"grid\", \"permutohedral\"),   design = NULL,   sigma_d = 1,   guides = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_joint4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"4D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint4d","text":"vec 4D array `NeuroVec`. guide_spatial 3D spatial guide. sigma_s Spatial sigma (voxels). sigma_t Temporal sigma (frames). sigma_r Range sigma guide intensity. range_bins Unused placeholder grid backend compatibility. passes Integer number lattice blur passes. mask Optional 3D mask. interp_guide Guide interpolation mode resampling. interp_mask Mask interpolation mode resampling. backend One 'grid' 'permutohedral'. design Optional length-T design regressor add lattice feature. sigma_d Sigma design feature. guides Optional list additional 3D guides.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_joint4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"4D joint bilateral (permutohedral backend; 'grid' alias supported) — fast_bilateral_joint4d","text":"Smoothed 4D data, wrapped like `vec` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_lattice3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast joint bilateral using a high-dimensional lattice (splat/blur/slice) — fast_bilateral_lattice3d","title":"Fast joint bilateral using a high-dimensional lattice (splat/blur/slice) — fast_bilateral_lattice3d","text":"High-dimensional bilateral filtering using permutohedral lattice backend. Supports optional spatial guide additional per-voxel guides.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_lattice3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast joint bilateral using a high-dimensional lattice (splat/blur/slice) — fast_bilateral_lattice3d","text":"","code":"fast_bilateral_lattice3d(   vol,   sigma_sp = 2.5,   sigma_r = 1,   guide = NULL,   guides = NULL,   blur_iters = 2L,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_lattice3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast joint bilateral using a high-dimensional lattice (splat/blur/slice) — fast_bilateral_lattice3d","text":"vol 3D volume array `NeuroVol`. sigma_sp Spatial sigma (voxels). sigma_r Range sigma(s) guide intensity dimensions. Scalar vector matching `guide` + `guides` count. guide Optional 3D spatial guide. guides Optional list additional 3D guides (e.g., probabilities). blur_iters Integer number lattice blur iterations. mask Optional 3D logical/0-1 mask.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_lattice3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast joint bilateral using a high-dimensional lattice (splat/blur/slice) — fast_bilateral_lattice3d","text":"Smoothed 3D volume, wrapped like `vol` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_lattice4d.html","id":null,"dir":"Reference","previous_headings":"","what":"4D joint bilateral lattice with weak temporal coupling (design-aware) — fast_bilateral_lattice4d","title":"4D joint bilateral lattice with weak temporal coupling (design-aware) — fast_bilateral_lattice4d","text":"Applies joint bilateral filtering across space time. Temporal coupling modeled via extra feature; optional design regressor can added lattice features.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_lattice4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"4D joint bilateral lattice with weak temporal coupling (design-aware) — fast_bilateral_lattice4d","text":"","code":"fast_bilateral_lattice4d(   vec,   sigma_sp = 2.5,   sigma_t = 0.5,   sigma_r = 1,   guide_spatial = NULL,   guides = NULL,   design = NULL,   sigma_d = 1,   blur_iters = 1L,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_lattice4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"4D joint bilateral lattice with weak temporal coupling (design-aware) — fast_bilateral_lattice4d","text":"vec 4D fMRI array `NeuroVec`. sigma_sp Spatial sigma (voxels). sigma_t Temporal sigma (frames). sigma_r Range sigma(s) guide intensity dimensions. Scalar vector matching `guide_spatial` + length(`guides`). guide_spatial Optional 3D spatial guide. guides Optional list 3D guides (probability maps, etc.). design Optional numeric vector length T (frames) design-aware features. sigma_d Sigma design regressor feature. blur_iters Integer number lattice blur iterations. mask Optional 3D logical/0-1 mask.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fast_bilateral_lattice4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"4D joint bilateral lattice with weak temporal coupling (design-aware) — fast_bilateral_lattice4d","text":"Smoothed 4D data, wrapped like `vec` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fmrismooth: Fast Edge-Preserving 3D/4D Smoothing and Denoising for fMRI — fmrismooth-package","title":"fmrismooth: Fast Edge-Preserving 3D/4D Smoothing and Denoising for fMRI — fmrismooth-package","text":"Edge-preserving guided filters, MP-PCA, TV denoising, lattice bilateral filters, tailored fMRI volumes/time-series. 'neuroim2' available, guides/masks automatically resampled fMRI grid.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fmrismooth: Fast Edge-Preserving 3D/4D Smoothing and Denoising for fMRI — fmrismooth-package","text":"Maintainer: Name .email@example.com","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth_default.html","id":null,"dir":"Reference","previous_headings":"","what":"One-liner fMRI smoother with auto-params, robust stage, and final-stage choice — fmrismooth_default","title":"One-liner fMRI smoother with auto-params, robust stage, and final-stage choice — fmrismooth_default","text":"Convenience pipeline optionally applies robust space-time smoothing stage, followed joint bilateral guided-filter final stage. Parameters can estimated automatically data voxel size.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One-liner fMRI smoother with auto-params, robust stage, and final-stage choice — fmrismooth_default","text":"","code":"fmrismooth_default(   vec,   robust = c(\"huber\", \"tukey\", \"none\"),   final = c(\"joint_bilateral\", \"guided_filter\"),   backend = c(\"grid\", \"permutohedral\"),   t1 = NULL,   probs = NULL,   mask = NULL,   interp_guide = 1L,   interp_mask = 0L,   auto_params = TRUE,   tr = NULL,   target_fwhm_mm = 5,   motion_params = NULL,   design = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One-liner fMRI smoother with auto-params, robust stage, and final-stage choice — fmrismooth_default","text":"vec 4D fMRI array `NeuroVec`. robust Robust loss pre-smoothing: one `\"huber\"`, `\"tukey\"`, `\"none\"`. final Final stage method: `\"joint_bilateral\"` `\"guided_filter\"`. backend Joint bilateral backend label (currently routes permutohedral). t1 Optional 3D anatomical guide. probs Optional list 3D probability maps used additional guides. mask Optional 3D logical/0-1 mask. interp_guide Guide interpolation mode resampling neuroim2. interp_mask Mask interpolation mode resampling neuroim2. auto_params `TRUE`, auto-estimate parameters via `recommend_params`. tr Repetition time (seconds) auto-params; optional. target_fwhm_mm Target spatial FWHM (mm) auto-params. motion_params Optional motion regressors temporal weighting. design Optional design regressor design-aware joint bilateral.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One-liner fMRI smoother with auto-params, robust stage, and final-stage choice — fmrismooth_default","text":"Smoothed 4D data, wrapped like `vec` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth_mppca_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"fmrismooth_mppca_pipeline: MP-PCA denoising followed by bilateral filtering — fmrismooth_mppca_pipeline","title":"fmrismooth_mppca_pipeline: MP-PCA denoising followed by bilateral filtering — fmrismooth_mppca_pipeline","text":"Denoises 4D fMRI MP-PCA overlapping patches, applies joint-bilateral lattice filter optional guides.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth_mppca_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fmrismooth_mppca_pipeline: MP-PCA denoising followed by bilateral filtering — fmrismooth_mppca_pipeline","text":"","code":"fmrismooth_mppca_pipeline(   vec,   t1 = NULL,   probs = NULL,   mask = NULL,   design = NULL,   motion = NULL,   sigma_mode = c(\"patch\", \"global\", \"fixed\"),   sigma_value = NULL,   sigma_sp = 2.5,   sigma_t = 0.5,   sigma_r = 15,   sigma_d = 1,   lattice_blur_iters = 1L )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth_mppca_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fmrismooth_mppca_pipeline: MP-PCA denoising followed by bilateral filtering — fmrismooth_mppca_pipeline","text":"vec 4D fMRI array `NeuroVec`. t1 Optional 3D structural guide. probs Optional list 3D guides (e.g., tissue probabilities). mask Optional 3D logical/0-1 mask. design Optional per-frame design regressor. motion Optional per-frame motion matrix used stages. sigma_mode MP-PCA noise mode: 'patch', 'global', 'fixed'. sigma_value Noise sigma `sigma_mode='fixed'`. sigma_sp Spatial sigma (voxels) joint bilateral. sigma_t Temporal sigma (frames) joint bilateral. sigma_r Range sigma(s) joint bilateral guidance. sigma_d Sigma design regressor feature. lattice_blur_iters Number lattice blur iterations.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/fmrismooth_mppca_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fmrismooth_mppca_pipeline: MP-PCA denoising followed by bilateral filtering — fmrismooth_mppca_pipeline","text":"Smoothed 4D data, wrapped like `vec` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/guided_filter3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for st_guided_filter3d — guided_filter3d","title":"Preferred alias for st_guided_filter3d — guided_filter3d","text":"Preferred alias st_guided_filter3d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/guided_filter3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for st_guided_filter3d — guided_filter3d","text":"","code":"guided_filter3d(vol, radius = 4L, eps = 0.7^2, guide = NULL, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/guided_filter3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for st_guided_filter3d — guided_filter3d","text":"vol 3D array neuroim2::NeuroVol radius integer window radius (voxels) eps regularization (variance floor) signal units^2 guide 3D array NeuroVol; NULL uses vol mask 3D logical/0-1 mask; NULL => voxels","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/guided_filter4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for st_guided_filter4d — guided_filter4d","title":"Preferred alias for st_guided_filter4d — guided_filter4d","text":"Preferred alias st_guided_filter4d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/guided_filter4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for st_guided_filter4d — guided_filter4d","text":"","code":"guided_filter4d(   vec,   radius_sp = 4L,   eps_sp = 0.7^2,   radius_t = 1L,   eps_t = 0.3^2,   guide_spatial = NULL,   guide_temporal = NULL,   motion_params = NULL,   sigma_m = 0.5,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/guided_filter4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for st_guided_filter4d — guided_filter4d","text":"vec 4D fMRI array `NeuroVec`. radius_sp Spatial filter radius (voxels). eps_sp Spatial regularization (variance floor). radius_t Temporal filter radius (frames). eps_t Temporal regularization. guide_spatial Optional 3D spatial guide. guide_temporal Optional length-T temporal guide. motion_params Optional T×(3 6) motion regressors; used weight temporal guidance. sigma_m Motion weight scale (frames). mask Optional 3D logical/0-1 mask.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mp_pca4d.html","id":null,"dir":"Reference","previous_headings":"","what":"MP-PCA denoising (local patches × time) for 4D fMRI — mp_pca4d","title":"MP-PCA denoising (local patches × time) for 4D fMRI — mp_pca4d","text":"Performs local PCA denoising overlapping 3D spatial patches across temporal window.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mp_pca4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MP-PCA denoising (local patches × time) for 4D fMRI — mp_pca4d","text":"","code":"mp_pca4d(   vec,   patch = c(5L, 5L, 5L),   tw = 32L,   stride = c(3L, 3L, 3L, 8L),   sigma_mode = c(\"patch\", \"global\", \"fixed\"),   sigma_value = NULL,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mp_pca4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MP-PCA denoising (local patches × time) for 4D fMRI — mp_pca4d","text":"vec 4D fMRI array `NeuroVec`. patch Integer length-3 patch size (voxels). tw Temporal window size (frames). stride Integer length-4 stride x,y,z,t. sigma_mode Noise mode: 'patch' (estimate per-patch), 'global' (one value), 'fixed'. sigma_value Noise sigma `sigma_mode='fixed'`. mask Optional 3D logical/0-1 mask.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mp_pca4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MP-PCA denoising (local patches × time) for 4D fMRI — mp_pca4d","text":"Denoised 4D data, wrapped like `vec` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mppca4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternate short alias for mp_pca4d — mppca4d","title":"Alternate short alias for mp_pca4d — mppca4d","text":"Alternate short alias mp_pca4d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mppca4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternate short alias for mp_pca4d — mppca4d","text":"","code":"mppca4d(   vec,   patch = c(5L, 5L, 5L),   tw = 32L,   stride = c(3L, 3L, 3L, 8L),   sigma_mode = c(\"patch\", \"global\", \"fixed\"),   sigma_value = NULL,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mppca4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternate short alias for mp_pca4d — mppca4d","text":"vec 4D fMRI array `NeuroVec`. patch Integer length-3 patch size (voxels). tw Temporal window size (frames). stride Integer length-4 stride x,y,z,t. sigma_mode Noise mode: 'patch' (estimate per-patch), 'global' (one value), 'fixed'. sigma_value Noise sigma `sigma_mode='fixed'`. mask Optional 3D logical/0-1 mask.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mppca_denoise4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for mp_pca4d — mppca_denoise4d","title":"Preferred alias for mp_pca4d — mppca_denoise4d","text":"Preferred alias mp_pca4d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mppca_denoise4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for mp_pca4d — mppca_denoise4d","text":"","code":"mppca_denoise4d(   vec,   patch = c(5L, 5L, 5L),   tw = 32L,   stride = c(3L, 3L, 3L, 8L),   sigma_mode = c(\"patch\", \"global\", \"fixed\"),   sigma_value = NULL,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/mppca_denoise4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for mp_pca4d — mppca_denoise4d","text":"vec 4D fMRI array `NeuroVec`. patch Integer length-3 patch size (voxels). tw Temporal window size (frames). stride Integer length-4 stride x,y,z,t. sigma_mode Noise mode: 'patch' (estimate per-patch), 'global' (one value), 'fixed'. sigma_value Noise sigma `sigma_mode='fixed'`. mask Optional 3D logical/0-1 mask.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/recommend_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Recommend smoothing parameters from voxel size, TR, and noise — recommend_params","title":"Recommend smoothing parameters from voxel size, TR, and noise — recommend_params","text":"Heuristically selects spatial/temporal smoothing robust-TV weights based voxel spacing, repetition time, noise estimate.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/recommend_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recommend smoothing parameters from voxel size, TR, and noise — recommend_params","text":"","code":"recommend_params(   vec,   mask = NULL,   tr = NULL,   target_fwhm_mm = 5,   sigma_mppca = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/recommend_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recommend smoothing parameters from voxel size, TR, and noise — recommend_params","text":"vec 4D fMRI array `NeuroVec`. mask Optional 3D logical/0-1 mask. tr Optional repetition time (seconds). Defaults 2. target_fwhm_mm Target spatial FWHM millimeters. sigma_mppca Optional pre-computed noise sigma. `NULL`, noise estimated `estimate_sigma_rician`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/recommend_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recommend smoothing parameters from voxel size, TR, and noise — recommend_params","text":"list fields `lambda_s`, `lambda_t`, `sigma_sp`, `sigma_t`, `sigma_r`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/smooth_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for fmrismooth_default — smooth_auto","title":"Preferred alias for fmrismooth_default — smooth_auto","text":"See [fmrismooth_default()] details.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/smooth_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for fmrismooth_default — smooth_auto","text":"","code":"smooth_auto(   vec,   robust = c(\"huber\", \"tukey\", \"none\"),   final = c(\"joint_bilateral\", \"guided_filter\"),   backend = c(\"grid\", \"permutohedral\"),   t1 = NULL,   probs = NULL,   mask = NULL,   interp_guide = 1L,   interp_mask = 0L,   auto_params = TRUE,   tr = NULL,   target_fwhm_mm = 5,   motion_params = NULL,   design = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/smooth_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for fmrismooth_default — smooth_auto","text":"vec 4D fMRI array `NeuroVec`. robust Robust loss pre-smoothing: one `\"huber\"`, `\"tukey\"`, `\"none\"`. final Final stage method: `\"joint_bilateral\"` `\"guided_filter\"`. backend Joint bilateral backend label (currently routes permutohedral). t1 Optional 3D anatomical guide. probs Optional list 3D probability maps used additional guides. mask Optional 3D logical/0-1 mask. interp_guide Guide interpolation mode resampling neuroim2. interp_mask Mask interpolation mode resampling neuroim2. auto_params `TRUE`, auto-estimate parameters via `recommend_params`. tr Repetition time (seconds) auto-params; optional. target_fwhm_mm Target spatial FWHM (mm) auto-params. motion_params Optional motion regressors temporal weighting. design Optional design regressor design-aware joint bilateral.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/smooth_mppca.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for fmrismooth_mppca_pipeline — smooth_mppca","title":"Preferred alias for fmrismooth_mppca_pipeline — smooth_mppca","text":"See [fmrismooth_mppca_pipeline()] details.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/smooth_mppca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for fmrismooth_mppca_pipeline — smooth_mppca","text":"","code":"smooth_mppca(   vec,   t1 = NULL,   probs = NULL,   mask = NULL,   design = NULL,   motion = NULL,   sigma_mode = c(\"patch\", \"global\", \"fixed\"),   sigma_value = NULL,   sigma_sp = 2.5,   sigma_t = 0.5,   sigma_r = 15,   sigma_d = 1,   lattice_blur_iters = 1L )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/smooth_mppca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for fmrismooth_mppca_pipeline — smooth_mppca","text":"vec 4D fMRI array `NeuroVec`. t1 Optional 3D structural guide. probs Optional list 3D guides (e.g., tissue probabilities). mask Optional 3D logical/0-1 mask. design Optional per-frame design regressor. motion Optional per-frame motion matrix used stages. sigma_mode MP-PCA noise mode: 'patch', 'global', 'fixed'. sigma_value Noise sigma `sigma_mode='fixed'`. sigma_sp Spatial sigma (voxels) joint bilateral. sigma_t Temporal sigma (frames) joint bilateral. sigma_r Range sigma(s) joint bilateral guidance. sigma_d Sigma design regressor feature. lattice_blur_iters Number lattice blur iterations.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_guided_filter3d.html","id":null,"dir":"Reference","previous_headings":"","what":"3D edge-preserving guided filter — st_guided_filter3d","title":"3D edge-preserving guided filter — st_guided_filter3d","text":"3D edge-preserving guided filter","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_guided_filter3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D edge-preserving guided filter — st_guided_filter3d","text":"","code":"st_guided_filter3d(vol, radius = 4L, eps = 0.7^2, guide = NULL, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_guided_filter3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D edge-preserving guided filter — st_guided_filter3d","text":"vol 3D array neuroim2::NeuroVol radius integer window radius (voxels) eps regularization (variance floor) signal units^2 guide 3D array NeuroVol; NULL uses vol mask 3D logical/0-1 mask; NULL => voxels","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_guided_filter3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"3D edge-preserving guided filter — st_guided_filter3d","text":"type input (NeuroVol given), otherwise 3D array","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_guided_filter4d.html","id":null,"dir":"Reference","previous_headings":"","what":"4D separable spatiotemporal guided filter Spatial guided filtering is applied per-frame (3D). Optionally, a temporal guided step (1D per voxel) is applied with motion-aware frame weights. — st_guided_filter4d","title":"4D separable spatiotemporal guided filter Spatial guided filtering is applied per-frame (3D). Optionally, a temporal guided step (1D per voxel) is applied with motion-aware frame weights. — st_guided_filter4d","text":"4D separable spatiotemporal guided filter Spatial guided filtering applied per-frame (3D). Optionally, temporal guided step (1D per voxel) applied motion-aware frame weights.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_guided_filter4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"4D separable spatiotemporal guided filter Spatial guided filtering is applied per-frame (3D). Optionally, a temporal guided step (1D per voxel) is applied with motion-aware frame weights. — st_guided_filter4d","text":"","code":"st_guided_filter4d(   vec,   radius_sp = 4L,   eps_sp = 0.7^2,   radius_t = 1L,   eps_t = 0.3^2,   guide_spatial = NULL,   guide_temporal = NULL,   motion_params = NULL,   sigma_m = 0.5,   mask = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_guided_filter4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"4D separable spatiotemporal guided filter Spatial guided filtering is applied per-frame (3D). Optionally, a temporal guided step (1D per voxel) is applied with motion-aware frame weights. — st_guided_filter4d","text":"vec 4D fMRI array `NeuroVec`. radius_sp Spatial filter radius (voxels). eps_sp Spatial regularization (variance floor). radius_t Temporal filter radius (frames). eps_t Temporal regularization. guide_spatial Optional 3D spatial guide. guide_temporal Optional length-T temporal guide. motion_params Optional T×(3 6) motion regressors; used weight temporal guidance. sigma_m Motion weight scale (frames). mask Optional 3D logical/0-1 mask.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_guided_filter4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"4D separable spatiotemporal guided filter Spatial guided filtering is applied per-frame (3D). Optionally, a temporal guided step (1D per voxel) is applied with motion-aware frame weights. — st_guided_filter4d","text":"Smoothed 4D data, wrapped like `vec` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_robust_smooth4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatiotemporal robust smoothing (Huber data term + anisotropic TV) — st_robust_smooth4d","title":"Spatiotemporal robust smoothing (Huber data term + anisotropic TV) — st_robust_smooth4d","text":"Robust fMRI denoising downweights outlier frames/voxels (Huber M-estimation) preserving edges via anisotropic space-time TV. Solved outer IRLS loops (update Huber data weights) inner Chambolle-Pock primal-dual solver.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_robust_smooth4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatiotemporal robust smoothing (Huber data term + anisotropic TV) — st_robust_smooth4d","text":"","code":"st_robust_smooth4d(   vec,   lambda_s = 0.8,   lambda_t = 0.25,   delta = 1.5,   outer_loops = 3L,   iters = 25L,   mask = NULL,   motion_params = NULL,   sigma_m = 0.5 )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_robust_smooth4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatiotemporal robust smoothing (Huber data term + anisotropic TV) — st_robust_smooth4d","text":"vec 4D fMRI (array neuroim2::NeuroVec) lambda_s spatial TV weight lambda_t temporal TV weight delta Huber threshold (signal units) data term; smaller => robust outer_loops number outer IRLS updates (2-5 typical) iters number inner primal-dual iterations per outer loop (20-40 typical) mask 3D mask (outside voxels passed unchanged) motion_params optional T x 6 (3) realignment params reduce temporal smoothing high motion sigma_m motion weighting scale (units framewise displacement proxy)","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/st_robust_smooth4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatiotemporal robust smoothing (Huber data term + anisotropic TV) — st_robust_smooth4d","text":"4D array NeuroVec","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/stv_denoise4d.html","id":null,"dir":"Reference","previous_headings":"","what":"4D space-time TV (ROF) denoising via Chambolle-Pock — stv_denoise4d","title":"4D space-time TV (ROF) denoising via Chambolle-Pock — stv_denoise4d","text":"Performs anisotropic total variation denoising space time.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/stv_denoise4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"4D space-time TV (ROF) denoising via Chambolle-Pock — stv_denoise4d","text":"","code":"stv_denoise4d(   vec,   lambda_s = 0.8,   lambda_t = 0.2,   iters = 30L,   mask = NULL,   tau = NULL,   sigma = NULL,   theta = 1 )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/stv_denoise4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"4D space-time TV (ROF) denoising via Chambolle-Pock — stv_denoise4d","text":"vec 4D fMRI array `NeuroVec`. lambda_s Spatial TV weight. lambda_t Temporal TV weight. iters Number primal-dual iterations (positive integer). mask Optional 3D logical/0-1 mask. tau Algorithm primal step size; `NULL`, sensible default used. sigma Algorithm dual step size; `NULL`, sensible default used. theta -relaxation parameter.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/stv_denoise4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"4D space-time TV (ROF) denoising via Chambolle-Pock — stv_denoise4d","text":"Smoothed 4D data, wrapped like `vec` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/stv_robust4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust space-time smoothing (Huber or Tukey) + anisotropic TV — stv_robust4d","title":"Robust space-time smoothing (Huber or Tukey) + anisotropic TV — stv_robust4d","text":"Applies robust data term (Huber Tukey) spatial/temporal TV priors, optionally motion-aware temporal weights.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/stv_robust4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust space-time smoothing (Huber or Tukey) + anisotropic TV — stv_robust4d","text":"","code":"stv_robust4d(   vec,   lambda_s = 0.8,   lambda_t = 0.2,   loss = c(\"huber\", \"tukey\"),   delta = NULL,   cthresh = NULL,   alpha = 1,   temporal_weights = NULL,   motion_params = NULL,   sigma_m = 0.5,   iters = 35L,   mask = NULL,   tau = NULL,   sigma = NULL,   theta = 1 )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/stv_robust4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust space-time smoothing (Huber or Tukey) + anisotropic TV — stv_robust4d","text":"vec 4D fMRI array `NeuroVec`. lambda_s Spatial TV weight. lambda_t Temporal TV weight. loss Robust loss: `'huber'` `'tukey'`. delta Huber threshold; `NULL`, derived noise. cthresh Tukey threshold; `NULL`, derived noise. alpha Tukey shape parameter. temporal_weights Optional length-(T T-1) temporal edge weights. motion_params Optional motion regressors derive temporal weights. sigma_m Motion weight scale. iters Iterations robust solver. mask Optional 3D logical/0-1 mask. tau Algorithm primal step size; `NULL`, sensible default used. sigma Algorithm dual step size; `NULL`, sensible default used. theta -relaxation parameter.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/stv_robust4d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Robust space-time smoothing (Huber or Tukey) + anisotropic TV — stv_robust4d","text":"Smoothed 4D data, wrapped like `vec` possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/suggest_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for recommend_params — suggest_params","title":"Preferred alias for recommend_params — suggest_params","text":"Preferred alias recommend_params","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/suggest_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for recommend_params — suggest_params","text":"","code":"suggest_params(   vec,   mask = NULL,   tr = NULL,   target_fwhm_mm = 5,   sigma_mppca = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/suggest_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for recommend_params — suggest_params","text":"vec 4D fMRI array `NeuroVec`. mask Optional 3D logical/0-1 mask. tr Optional repetition time (seconds). Defaults 2. target_fwhm_mm Target spatial FWHM millimeters. sigma_mppca Optional pre-computed noise sigma. `NULL`, noise estimated `estimate_sigma_rician`.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/tv_denoise4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for stv_denoise4d — tv_denoise4d","title":"Preferred alias for stv_denoise4d — tv_denoise4d","text":"Preferred alias stv_denoise4d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/tv_denoise4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for stv_denoise4d — tv_denoise4d","text":"","code":"tv_denoise4d(   vec,   lambda_s = 0.8,   lambda_t = 0.2,   iters = 30L,   mask = NULL,   tau = NULL,   sigma = NULL,   theta = 1 )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/tv_denoise4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for stv_denoise4d — tv_denoise4d","text":"vec 4D fMRI array `NeuroVec`. lambda_s Spatial TV weight. lambda_t Temporal TV weight. iters Number primal-dual iterations (positive integer). mask Optional 3D logical/0-1 mask. tau Algorithm primal step size; `NULL`, sensible default used. sigma Algorithm dual step size; `NULL`, sensible default used. theta -relaxation parameter.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/tv_robust4d.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for stv_robust4d — tv_robust4d","title":"Preferred alias for stv_robust4d — tv_robust4d","text":"Preferred alias stv_robust4d","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/tv_robust4d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for stv_robust4d — tv_robust4d","text":"","code":"tv_robust4d(   vec,   lambda_s = 0.8,   lambda_t = 0.2,   loss = c(\"huber\", \"tukey\"),   delta = NULL,   cthresh = NULL,   alpha = 1,   temporal_weights = NULL,   motion_params = NULL,   sigma_m = 0.5,   iters = 35L,   mask = NULL,   tau = NULL,   sigma = NULL,   theta = 1 )"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/tv_robust4d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for stv_robust4d — tv_robust4d","text":"vec 4D fMRI array `NeuroVec`. lambda_s Spatial TV weight. lambda_t Temporal TV weight. loss Robust loss: `'huber'` `'tukey'`. delta Huber threshold; `NULL`, derived noise. cthresh Tukey threshold; `NULL`, derived noise. alpha Tukey shape parameter. temporal_weights Optional length-(T T-1) temporal edge weights. motion_params Optional motion regressors derive temporal weights. sigma_m Motion weight scale. iters Iterations robust solver. mask Optional 3D logical/0-1 mask. tau Algorithm primal step size; `NULL`, sensible default used. sigma Algorithm dual step size; `NULL`, sensible default used. theta -relaxation parameter.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_denoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for vst_wrap — vst_denoise","title":"Preferred alias for vst_wrap — vst_denoise","text":"Preferred alias vst_wrap","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_denoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for vst_wrap — vst_denoise","text":"","code":"vst_denoise(x, sigma = NULL, denoise_fun, ...)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_denoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for vst_wrap — vst_denoise","text":"x 3D/4D magnitude array neuroim2 volume/vec. sigma Optional noise sigma. `NULL` 4D input provided, sigma estimated `estimate_sigma_rician`. denoise_fun Function takes array returns array dimensions. ... Additional arguments forwarded `denoise_fun`.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_forward.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for vst_forward_rician — vst_forward","title":"Preferred alias for vst_forward_rician — vst_forward","text":"Preferred alias vst_forward_rician","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_forward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for vst_forward_rician — vst_forward","text":"","code":"vst_forward(x, sigma)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_forward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for vst_forward_rician — vst_forward","text":"x Numeric array (3D/4D) magnitudes. sigma Noise standard deviation.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_forward_rician.html","id":null,"dir":"Reference","previous_headings":"","what":"VST forward for Rician magnitude — vst_forward_rician","title":"VST forward for Rician magnitude — vst_forward_rician","text":"Applies variance-stabilizing transform Rician magnitude data.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_forward_rician.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VST forward for Rician magnitude — vst_forward_rician","text":"","code":"vst_forward_rician(x, sigma)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_forward_rician.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VST forward for Rician magnitude — vst_forward_rician","text":"x Numeric array (3D/4D) magnitudes. sigma Noise standard deviation.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_forward_rician.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VST forward for Rician magnitude — vst_forward_rician","text":"Array shape `x`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Preferred alias for vst_inverse_rician — vst_inverse","title":"Preferred alias for vst_inverse_rician — vst_inverse","text":"Preferred alias vst_inverse_rician","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preferred alias for vst_inverse_rician — vst_inverse","text":"","code":"vst_inverse(z, sigma)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preferred alias for vst_inverse_rician — vst_inverse","text":"z Transformed array (output `vst_forward_rician`). sigma Noise standard deviation.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_inverse_rician.html","id":null,"dir":"Reference","previous_headings":"","what":"VST inverse for Rician magnitude — vst_inverse_rician","title":"VST inverse for Rician magnitude — vst_inverse_rician","text":"Inverts Rician VST.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_inverse_rician.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VST inverse for Rician magnitude — vst_inverse_rician","text":"","code":"vst_inverse_rician(z, sigma)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_inverse_rician.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VST inverse for Rician magnitude — vst_inverse_rician","text":"z Transformed array (output `vst_forward_rician`). sigma Noise standard deviation.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_inverse_rician.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VST inverse for Rician magnitude — vst_inverse_rician","text":"Array shape `z`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a denoiser with a Rician VST (variance-stabilizing transform) — vst_wrap","title":"Wrap a denoiser with a Rician VST (variance-stabilizing transform) — vst_wrap","text":"Converts magnitude data approximately homoscedastic Gaussian via VST, applies `denoise_fun`, inverts VST.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a denoiser with a Rician VST (variance-stabilizing transform) — vst_wrap","text":"","code":"vst_wrap(x, sigma = NULL, denoise_fun, ...)"},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a denoiser with a Rician VST (variance-stabilizing transform) — vst_wrap","text":"x 3D/4D magnitude array neuroim2 volume/vec. sigma Optional noise sigma. `NULL` 4D input provided, sigma estimated `estimate_sigma_rician`. denoise_fun Function takes array returns array dimensions. ... Additional arguments forwarded `denoise_fun`.","code":""},{"path":"https://bbuchsbaum.github.io/fmrismooth/reference/vst_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap a denoiser with a Rician VST (variance-stabilizing transform) — vst_wrap","text":"denoised data, shape/type `x` (wrapped via `nv_wrap_like`).","code":""}]
