// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bilateral_lattice3d_cpp
SEXP bilateral_lattice3d_cpp(NumericVector vol3d, LogicalVector mask3, double sigma_sp, NumericVector sigma_r, SEXP guide_, SEXP guides_, int blur_iters);
RcppExport SEXP _fmrismooth_bilateral_lattice3d_cpp(SEXP vol3dSEXP, SEXP mask3SEXP, SEXP sigma_spSEXP, SEXP sigma_rSEXP, SEXP guide_SEXP, SEXP guides_SEXP, SEXP blur_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vol3d(vol3dSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask3(mask3SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_sp(sigma_spSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_r(sigma_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type guide_(guide_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type guides_(guides_SEXP);
    Rcpp::traits::input_parameter< int >::type blur_iters(blur_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(bilateral_lattice3d_cpp(vol3d, mask3, sigma_sp, sigma_r, guide_, guides_, blur_iters));
    return rcpp_result_gen;
END_RCPP
}
// bilateral_lattice4d_cpp
SEXP bilateral_lattice4d_cpp(NumericVector vec4d, LogicalVector mask3, double sigma_sp, double sigma_t, NumericVector sigma_r, SEXP guide_spatial_, SEXP guides_, SEXP design_, double sigma_d, int blur_iters);
RcppExport SEXP _fmrismooth_bilateral_lattice4d_cpp(SEXP vec4dSEXP, SEXP mask3SEXP, SEXP sigma_spSEXP, SEXP sigma_tSEXP, SEXP sigma_rSEXP, SEXP guide_spatial_SEXP, SEXP guides_SEXP, SEXP design_SEXP, SEXP sigma_dSEXP, SEXP blur_itersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec4d(vec4dSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask3(mask3SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_sp(sigma_spSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_t(sigma_tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_r(sigma_rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type guide_spatial_(guide_spatial_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type guides_(guides_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type design_(design_SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_d(sigma_dSEXP);
    Rcpp::traits::input_parameter< int >::type blur_iters(blur_itersSEXP);
    rcpp_result_gen = Rcpp::wrap(bilateral_lattice4d_cpp(vec4d, mask3, sigma_sp, sigma_t, sigma_r, guide_spatial_, guides_, design_, sigma_d, blur_iters));
    return rcpp_result_gen;
END_RCPP
}
// mppca4d_core
SEXP mppca4d_core(NumericVector vec4d, LogicalVector mask3, IntegerVector patch, int tw, IntegerVector stride, double sigma);
RcppExport SEXP _fmrismooth_mppca4d_core(SEXP vec4dSEXP, SEXP mask3SEXP, SEXP patchSEXP, SEXP twSEXP, SEXP strideSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec4d(vec4dSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask3(mask3SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type patch(patchSEXP);
    Rcpp::traits::input_parameter< int >::type tw(twSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type stride(strideSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mppca4d_core(vec4d, mask3, patch, tw, stride, sigma));
    return rcpp_result_gen;
END_RCPP
}
// permutohedral_lattice3d_cpp
SEXP permutohedral_lattice3d_cpp(SEXP vol3d_, SEXP mask3_, SEXP sigma_sp_, SEXP sigma_r_, SEXP guide_, SEXP guides_, SEXP passes_);
RcppExport SEXP _fmrismooth_permutohedral_lattice3d_cpp(SEXP vol3d_SEXP, SEXP mask3_SEXP, SEXP sigma_sp_SEXP, SEXP sigma_r_SEXP, SEXP guide_SEXP, SEXP guides_SEXP, SEXP passes_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vol3d_(vol3d_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mask3_(mask3_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigma_sp_(sigma_sp_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigma_r_(sigma_r_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type guide_(guide_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type guides_(guides_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type passes_(passes_SEXP);
    rcpp_result_gen = Rcpp::wrap(permutohedral_lattice3d_cpp(vol3d_, mask3_, sigma_sp_, sigma_r_, guide_, guides_, passes_));
    return rcpp_result_gen;
END_RCPP
}
// permutohedral_lattice4d_cpp
SEXP permutohedral_lattice4d_cpp(SEXP vec4d_, SEXP mask3_, SEXP sigma_sp_, SEXP sigma_t_, SEXP sigma_r_, SEXP guide_spatial_, SEXP guides_, SEXP design_, SEXP sigma_d_, SEXP passes_);
RcppExport SEXP _fmrismooth_permutohedral_lattice4d_cpp(SEXP vec4d_SEXP, SEXP mask3_SEXP, SEXP sigma_sp_SEXP, SEXP sigma_t_SEXP, SEXP sigma_r_SEXP, SEXP guide_spatial_SEXP, SEXP guides_SEXP, SEXP design_SEXP, SEXP sigma_d_SEXP, SEXP passes_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vec4d_(vec4d_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mask3_(mask3_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigma_sp_(sigma_sp_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigma_t_(sigma_t_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigma_r_(sigma_r_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type guide_spatial_(guide_spatial_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type guides_(guides_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type design_(design_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type sigma_d_(sigma_d_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type passes_(passes_SEXP);
    rcpp_result_gen = Rcpp::wrap(permutohedral_lattice4d_cpp(vec4d_, mask3_, sigma_sp_, sigma_t_, sigma_r_, guide_spatial_, guides_, design_, sigma_d_, passes_));
    return rcpp_result_gen;
END_RCPP
}
// robust_tv_huber_4d_cpp
SEXP robust_tv_huber_4d_cpp(NumericVector vec4d, LogicalVector mask3, double lambda_s, double lambda_t, double delta, int outer_loops, int iters, NumericVector wt_in);
RcppExport SEXP _fmrismooth_robust_tv_huber_4d_cpp(SEXP vec4dSEXP, SEXP mask3SEXP, SEXP lambda_sSEXP, SEXP lambda_tSEXP, SEXP deltaSEXP, SEXP outer_loopsSEXP, SEXP itersSEXP, SEXP wt_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec4d(vec4dSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask3(mask3SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_t(lambda_tSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type outer_loops(outer_loopsSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wt_in(wt_inSEXP);
    rcpp_result_gen = Rcpp::wrap(robust_tv_huber_4d_cpp(vec4d, mask3, lambda_s, lambda_t, delta, outer_loops, iters, wt_in));
    return rcpp_result_gen;
END_RCPP
}
// tv_tukey_4d_cpp
SEXP tv_tukey_4d_cpp(NumericVector vec4d, LogicalVector mask3, double lambda_s, double lambda_t, double cthresh, double alpha, NumericVector wt_edge, int iters, double tau, double sigma, double theta);
RcppExport SEXP _fmrismooth_tv_tukey_4d_cpp(SEXP vec4dSEXP, SEXP mask3SEXP, SEXP lambda_sSEXP, SEXP lambda_tSEXP, SEXP cthreshSEXP, SEXP alphaSEXP, SEXP wt_edgeSEXP, SEXP itersSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec4d(vec4dSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask3(mask3SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_t(lambda_tSEXP);
    Rcpp::traits::input_parameter< double >::type cthresh(cthreshSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wt_edge(wt_edgeSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(tv_tukey_4d_cpp(vec4d, mask3, lambda_s, lambda_t, cthresh, alpha, wt_edge, iters, tau, sigma, theta));
    return rcpp_result_gen;
END_RCPP
}
// guided3d_core
SEXP guided3d_core(NumericVector vol, NumericVector guide, LogicalVector mask, int radius, double eps);
RcppExport SEXP _fmrismooth_guided3d_core(SEXP volSEXP, SEXP guideSEXP, SEXP maskSEXP, SEXP radiusSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vol(volSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guide(guideSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(guided3d_core(vol, guide, mask, radius, eps));
    return rcpp_result_gen;
END_RCPP
}
// temporal_guided1d_core
SEXP temporal_guided1d_core(NumericVector vec4d, SEXP gtemp, NumericVector w, LogicalVector mask3, int radius_t, double eps_t);
RcppExport SEXP _fmrismooth_temporal_guided1d_core(SEXP vec4dSEXP, SEXP gtempSEXP, SEXP wSEXP, SEXP mask3SEXP, SEXP radius_tSEXP, SEXP eps_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec4d(vec4dSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gtemp(gtempSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask3(mask3SEXP);
    Rcpp::traits::input_parameter< int >::type radius_t(radius_tSEXP);
    Rcpp::traits::input_parameter< double >::type eps_t(eps_tSEXP);
    rcpp_result_gen = Rcpp::wrap(temporal_guided1d_core(vec4d, gtemp, w, mask3, radius_t, eps_t));
    return rcpp_result_gen;
END_RCPP
}
// tv_denoise_4d_cpp
SEXP tv_denoise_4d_cpp(NumericVector vec4d, LogicalVector mask3, double lambda_s, double lambda_t, int iters, double tau, double sigma, double theta);
RcppExport SEXP _fmrismooth_tv_denoise_4d_cpp(SEXP vec4dSEXP, SEXP mask3SEXP, SEXP lambda_sSEXP, SEXP lambda_tSEXP, SEXP itersSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec4d(vec4dSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask3(mask3SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_s(lambda_sSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_t(lambda_tSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(tv_denoise_4d_cpp(vec4d, mask3, lambda_s, lambda_t, iters, tau, sigma, theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fmrismooth_bilateral_lattice3d_cpp", (DL_FUNC) &_fmrismooth_bilateral_lattice3d_cpp, 7},
    {"_fmrismooth_bilateral_lattice4d_cpp", (DL_FUNC) &_fmrismooth_bilateral_lattice4d_cpp, 10},
    {"_fmrismooth_mppca4d_core", (DL_FUNC) &_fmrismooth_mppca4d_core, 6},
    {"_fmrismooth_permutohedral_lattice3d_cpp", (DL_FUNC) &_fmrismooth_permutohedral_lattice3d_cpp, 7},
    {"_fmrismooth_permutohedral_lattice4d_cpp", (DL_FUNC) &_fmrismooth_permutohedral_lattice4d_cpp, 10},
    {"_fmrismooth_robust_tv_huber_4d_cpp", (DL_FUNC) &_fmrismooth_robust_tv_huber_4d_cpp, 8},
    {"_fmrismooth_tv_tukey_4d_cpp", (DL_FUNC) &_fmrismooth_tv_tukey_4d_cpp, 11},
    {"_fmrismooth_guided3d_core", (DL_FUNC) &_fmrismooth_guided3d_core, 5},
    {"_fmrismooth_temporal_guided1d_core", (DL_FUNC) &_fmrismooth_temporal_guided1d_core, 6},
    {"_fmrismooth_tv_denoise_4d_cpp", (DL_FUNC) &_fmrismooth_tv_denoise_4d_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_fmrismooth(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
